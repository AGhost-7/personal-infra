
- name: create namespace
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: jokemongo
        labels:
          project: jokemongo

- name: create persistent volume claim
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: mongo
        namespace: jokemongo
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
        storageClassName: local-path

- name: create jokemongo secret
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: jokemongo-secret
        namespace: jokemongo
      data:
        password: "{{ jokemongo_db_password | b64encode }}"

- name: create mongodb deployment
  k8s:
    apply: True
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: mongo
        namespace: jokemongo
        labels:
          type: db
          db: mongo
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            type: db
            db: mongo
        template:
          metadata:
            labels:
              type: db
              db: mongo
          spec:
            containers:
            - name: mongo
              image: "mongo:4.0"
              env:
                - name: MONGO_INITDB_ROOT_USERNAME
                  value: jokemongo
                - name: MONGO_INITDB_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: jokemongo-secret
                      key: password
              ports:
                - containerPort: 27017
              volumeMounts:
              - mountPath: "/data"
                name: mongo-data
            volumes:
            - name: mongo-data
              persistentVolumeClaim:
                claimName: mongo

- name: create service for mongo
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: mongo
        namespace: jokemongo
      spec:
        selector:
          type: db
          db: mongo
        ports:
        - port: 27017
          targetPort: 27017

- name: create network policy
  k8s:
    apply: True
    definition:
      apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        name: mongo-network-policy
        namespace: jokemongo
      spec:
        podSelector:
          matchLabels:
            type: db
            db: mongo
        policyTypes:
        - Ingress
        ingress:
        - from:
          - namespaceSelector:
            matchLabels:
                project: jokemongo

- name: create joke deployment
  k8s:
    apply: True
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: jokemongo
        namespace: jokemongo
      spec:
        replicas: 1
        selector:
          matchLabels:
            type: app
            app: jokemongo
        template:
          metadata:
            labels:
              type: app
              app: jokemongo
          spec:
            containers:
            - name: jokemongo
              image: aghost7/jokemongo
              imagePullPolicy: Always
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8067
                initialDelaySeconds: 10
                periodSeconds: 3
              env:
              - name: jokemongo.db.host
                value: mongo
              - name: jokemongo.db.user
                value: jokemongo
              - name: jokemongo.db.password
                valueFrom:
                  secretKeyRef:
                    name: jokemongo-secret
                    key: password

- name: create service for joke app
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: jokemongo
        namespace: jokemongo
      spec:
        selector:
          type: app
          app: jokemongo
        ports:
        - port: 8066
          targetPort: 8066
          protocol: TCP
          name: http

- name: create ingress
  k8s:
    apply: True
    definition:
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: jokemongo-ingress
        namespace: jokemongo
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: jonathan-boudreau
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
      spec:
        tls:
        - hosts:
          - jokes.jonathan-boudreau.com
          secretName: ingress-tls-cert
        rules:
        - host: jokes.jonathan-boudreau.com
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                serviceName: jokemongo
                servicePort: 8066
