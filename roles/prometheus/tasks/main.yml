
- name: create namespace
  k8s:
    definition:
      kind: Namespace
      apiVersion: v1
      metadata:
        name: prometheus
        labels:
          component: metric-scraper

- name: create pvc
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: prometheus-data
        namespace: prometheus
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
        storageClassName: "{{ prometheus_storage_class }}"

- name: create alertmanager pvc
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: alertmanager-data
        namespace: prometheus
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 1Gi
        storageClassName: "{{ prometheus_storage_class }}"

- name: create service account
  k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: prometheus
        namespace: prometheus

- name: create prometheus role
  k8s:
    apply: True
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: prometheus-role
      rules:
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: ["get", "list", "watch"]
      - nonResourceURLs: ["/metrics"]
        verbs: ["get"]

- name: assign role to service account
  k8s:
    apply: True
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: prometheus-role-binding
      subjects:
      - kind: ServiceAccount
        name: prometheus
        namespace: prometheus
      roleRef:
        kind: ClusterRole
        name: prometheus-role
        apiGroup: rbac.authorization.k8s.io

- name: create smtp secret
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: alertmanager-secret
        namespace: prometheus
      stringData:
        smtp_auth_password: "{{ prometheus_mail_password }}"

- name: create blackbox config
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: blackbox-config
        namespace: prometheus
      data:
        blackbox-exporter.yml: |
          modules:
            http_2xx:
              prober: http
              http:
                fail_if_not_ssl: true
                preferred_ip_protocol: ip4

- name: create alertmanager config
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: alertmanager-config
        namespace: prometheus
      data:
        alertmanager.yml: |
          global:
            smtp_from: noreply@alerts.jonathan-boudreau.com
            smtp_smarthost: "smtp.mailgun.org:587"
            smtp_auth_username: {{ prometheus_mail_username }}
            smtp_auth_password: # smtp_auth_password
          templates:
            - '/templates/*.tmpl'
          route:
            receiver: 'default'
          receivers:
          - name: 'default'
            email_configs:
            - to: "{{ prometheus_mail_recipient }}"
              from: "noreply@alerts.jonathan-boudreau.com"

- name: create rules config
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: rules-config
        namespace: prometheus
      data:
        rules.yml: |
          groups:
          - name: down
            rules:
            - alert: Down
              expr: probe_success == 0
              for: 5m
              annotations:
                summary: "{{ '{{' }}$labels.instance{{ '}}' }} is down"
                description: "{{ '{{' }}$labels.instance{{ '}}' }} has been down for 5 minutes."

- name: create prometheus config
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: prometheus-config
        namespace: prometheus
      data:
        prometheus.yml: |
          global:
            scrape_interval: 30s
            evaluation_interval: 30s
          scrape_configs:
          - job_name: 'prometheus'
            static_configs:
            - targets: ['localhost:9090']
          - job_name: 'kube-state-metrics'
            static_configs:
            - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
          - job_name: 'blackbox_probes'
            metrics_path: /probe
            static_configs:
              - targets:
                - "https://jokes.jonathan-boudreau.com"
                - "https://jenkins.jonathan-boudreau.com"
            relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: localhost:9115
          - job_name: 'k8s-nodes'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            authorization:
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
          - job_name: 'k8s-cadvisor'
            scheme: https
            metrics_path: /metrics/cadvisor
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            authorization:
              credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
          rule_files: ['/etc/prometheus/rules/*.yml']
          alerting:
            alertmanagers:
            - static_configs:
              - targets: ['localhost:9093']

- name: deploy prometheus pods
  k8s:
    apply: True
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: prometheus
        namespace: prometheus
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            type: metric
            metric: prometheus
        template:
          metadata:
            labels:
              type: metric
              metric: prometheus
          spec:
            containers:
            - name: alertmanager
              image: prom/alertmanager
              command: [sh]
              args:
              - -c
              - |
                set -e
                sed "s/# smtp_auth_password/$(cat /secret/smtp_auth_password)/" /config/alertmanager.yml > /home/alertmanager.yml
                exec alertmanager --config.file=/home/alertmanager.yml
              volumeMounts:
              - mountPath: /config
                name: alertmanager-config-vol
              - mountPath: /secret
                name: alertmanager-secret-vol
                readOnly: true
            - name: blackbox-exporter
              image: prom/blackbox-exporter
              args:
              - "--config.file=/config/blackbox-exporter.yml"
              volumeMounts:
              - mountPath: "/config"
                name: blackbox-config-vol
            - name: prometheus
              image: prom/prometheus
              args:
              - "--config.file=/etc/prometheus/config/prometheus.yml"
              resources:
                requests:
                  cpu: "100m"
                  memory: "80Mi"
                limits:
                  cpu: "500m"
                  memory: "200Mi"
              volumeMounts:
              - mountPath: "/prometheus"
                name: prometheus-data-vol
              - mountPath: "/etc/prometheus/config"
                name: prometheus-config-vol
              - mountPath: "/etc/prometheus/rules"
                name: rules-config-vol
            - name: debug
              image: ubuntu:focal
              args: [sleep, Infinity]
            serviceAccountName: prometheus
            volumes:
            - name: prometheus-data-vol
              persistentVolumeClaim:
                claimName: prometheus-data
            - name: prometheus-config-vol
              configMap:
                name: prometheus-config
            - name: blackbox-config-vol
              configMap:
                name: blackbox-config
            - name: rules-config-vol
              configMap:
                name: rules-config
            - name: alertmanager-config-vol
              configMap:
                name: alertmanager-config
            - name: alertmanager-secret-vol
              secret:
                secretName: alertmanager-secret

- name: create prometheus service
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus
        namespace: prometheus
      spec:
        selector:
          type: metric
          metric: prometheus
        ports:
        - port: 9090
          targetPort: 9090
          protocol: TCP
          name: http

- name: create basic auth secret
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-auth
        namespace: prometheus
      type: Opaque
      stringData:
        auth: "{{ prometheus_htpasswd }}"

- name: expose prometheus
  k8s:
    apply: True
    definition:
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: prometheus-ingress
        namespace: prometheus
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: jonathan-boudreau
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: prometheus-auth
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      spec:
        tls:
        - hosts:
          - prom.jonathan-boudreau.com
          secretName: ingress-tls-cert
        rules:
        - host: prom.jonathan-boudreau.com
          http:
            paths:
            - path: /
              backend:
                serviceName: prometheus
                servicePort: 9090
