
- name: create namespace
  k8s:
    definition:
      kind: Namespace
      apiVersion: v1
      metadata:
        name: prometheus
        labels:
          component: metric-scraper

- name: create pvc
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: prometheus-data
        namespace: prometheus
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
        storageClassName: "{{ prometheus_storage_class }}"

- name: create configmap
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: prometheus-config
        namespace: prometheus
      data:
        blackbox-exporter.yml: |
          modules:
            http_2xx:
              prober: http
              http:
                fail_if_not_ssl: true
                preferred_ip_protocol: ip4
        prometheus.yml: |
          global:
            scrape_interval: 30s
            evaluation_interval: 30s
          scrape_configs:
          - job_name: 'kube-state-metrics'
            static_configs:
            - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']
          - job_name: 'blackbox_probes'
            metrics_path: /probe
            static_configs:
              - targets:
                - "https://jokes.jonathan-boudreau.com"
                - "https://jenkins.jonathan-boudreau.com"
            relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: localhost:9115

- name: deploy prometheus pods
  k8s:
    apply: True
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: prometheus
        namespace: prometheus
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            type: metric
            metric: prometheus
        template:
          metadata:
            labels:
              type: metric
              metric: prometheus
          spec:
            containers:
            - name: blackbox-exporter
              image: prom/blackbox-exporter
              args:
              - "--config.file=/config/blackbox-exporter.yml"
              volumeMounts:
              - mountPath: "/config"
                name: prometheus-config-vol
            - name: prometheus
              image: prom/prometheus
              args:
              - "--config.file=/etc/prometheus/config/prometheus.yml"
              resources:
                requests:
                  cpu: "100m"
                  memory: "80Mi"
                limits:
                  cpu: "500m"
                  memory: "200Mi"
              volumeMounts:
              - mountPath: "/prometheus"
                name: prometheus-data-vol
              - mountPath: "/etc/prometheus/config"
                name: prometheus-config-vol
            volumes:
            - name: prometheus-data-vol
              persistentVolumeClaim:
                claimName: prometheus-data
            - name: prometheus-config-vol
              configMap:
                name: prometheus-config

- name: create prometheus service
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus
        namespace: prometheus
      spec:
        selector:
          type: metric
          metric: prometheus
        ports:
        - port: 9090
          targetPort: 9090
          protocol: TCP
          name: http

- name: create basic auth secret
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-auth
        namespace: prometheus
      type: Opaque
      stringData:
        auth: "{{ prometheus_htpasswd }}"

- name: expose prometheus
  k8s:
    apply: True
    definition:
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: prometheus-ingress
        namespace: prometheus
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: jonathan-boudreau
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: prometheus-auth
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      spec:
        tls:
        - hosts:
          - prom.jonathan-boudreau.com
          secretName: ingress-tls-cert
        rules:
        - host: prom.jonathan-boudreau.com
          http:
            paths:
            - path: /
              backend:
                serviceName: prometheus
                servicePort: 9090
