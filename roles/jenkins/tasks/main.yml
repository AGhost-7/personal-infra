
- name: create namespace
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: jenkins

- name: create namespace for jenkins to run jobs in
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: jenkins-job

- name: create jenkins service account
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: jenkins
        namespace: jenkins

- name: create jenkins role
  community.kubernetes.k8s:
    apply: True
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: jenkins-role
        namespace: jenkins-job
      rules:
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["create", "update", "delete", "get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events", "pods/exec"]
        verbs: ["get", "list", "watch"]

- name: bind role to jenkins service account
  community.kubernetes.k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        namespace: jenkins-job
        name: jenkins-role-binding
      subjects:
      - kind: ServiceAccount
        name: jenkins
        namespace: jenkins
      roleRef:
        kind: Role
        name: jenkins-role
        apiGroup: rbac.authorization.k8s.io

- name: create home pvc
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: jenkins-home
        namespace: jenkins
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 2Gi
        storageClassName: "{{ jenkins_storage_class }}"

- name: create plugin pvc
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: jenkins-plugins
        namespace: jenkins
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 1Gi
        storageClassName: "{{ jenkins_storage_class }}"

- name: create secrets
  community.kubernetes.k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: jenkins
        namespace: jenkins
      type: Opaque
      data:
        github-status-token: "{{ jenkins_github_status_token | b64encode }}"
        dockerhub-password: "{{ jenkins_dockerhub_password | b64encode }}"
        do-access-token: "{{ jenkins_do_access_token | b64encode }}"
        do-ssh-private-key: "{{ jenkins_do_ssh_private_key | b64encode }}"
  notify: re-deploy

- name: create jenkins config
  community.kubernetes.k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: jenkins
        namespace: jenkins
      data:
        plugins.txt: |
          configuration-as-code
          blueocean
          kubernetes
          git
          workflow-aggregator
          github-branch-source
          credentials-binding
          cloudbees-folder
          timestamper
          digitalocean-plugin
        configuration-as-code.yml: |
          jenkins:
            clouds:
            - kubernetes:
                name: "kubernetes"
                containerCap: 2
                containerCapStr: "2"
                namespace: jenkins-job
                jenkinsTunnel: "jenkins.jenkins.svc.cluster.local:"
            - digitalOcean:
                name: "digitalocean"
                privateKeyCredentialId: "do-ssh-private-key"
                sshKeyId: {{ jenkins_do_ssh_key_id }}
                authTokenCredentialID: "do-access-token"
                instanceCap: 1
                templates:
                - name: "ubuntu"
                  idleTerminationInMinutes: 10
                  imageId: "ubuntu-20-04-x64"
                  sizeId: "s-1vcpu-1gb"
                  labelString: "ubuntu-vm"
                  labellessJobsAllowed: false
                  sshPort: 22
                  username: "root"
                  workspacePath: "/jenkins"
                  regionId: "tor1"
                  numExecutors: 1
                  instanceCap: 1
                  installMonitoring: false
                  setupPrivateNetworking: false
          unclassified:
            gitHubPluginConfig:
              hookUrl: "https://jenkins.jonathan-boudreau.com/github-webhook/"
            location:
              adminAddress: "address not configured yet <nobody@nowhere>"
              url: "https://jenkins.jonathan-boudreau.com/"
          credentials:
            system:
              domainCredentials:
              - credentials:
                - string:
                    id: "github-status-access-token"
                    scope: GLOBAL
                    secret: ${GITHUB_STATUS_TOKEN}
                - string:
                    id: "do-access-token"
                    scope: GLOBAL
                    secret: ${DO_ACCESS_TOKEN}
                - basicSSHUserPrivateKey:
                    id: "do-ssh-private-key"
                    privateKeySource:
                      directEntry:
                        privateKey: ${DO_SSH_PRIVATE_KEY}
                    scope: GLOBAL
                    username: "root"
                - usernamePassword:
                    id: dockerhub
                    password: ${DOCKERHUB_PASSWORD}
                    scope: GLOBAL
                    username: aghost7
  notify: re-deploy

- name: create deployment
  register: jenkins_deployment
  community.kubernetes.k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: jenkins
        namespace: jenkins
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            type: build
            build: jenkins
        template:
          metadata:
            labels:
              type: build
              build: jenkins
          spec:
            initContainers:
            - name: install-plugins
              image: "{{ jenkins_image }}"
              volumeMounts:
              - mountPath: /var/jenkins_home
                name: jenkins-home-vol
              - mountPath: "/usr/share/jenkins/ref/plugins"
                name: jenkins-plugins-vol
              - mountPath: /etc/jenkins
                name: jenkins-config-vol
                readOnly: true
              command: [bash]
              args: 
                - "-c"
                - "/usr/local/bin/install-plugins.sh < /etc/jenkins/plugins.txt"
            containers:
            - name: jenkins
              image: "{{ jenkins_image }}"
              resources:
                limits:
                  cpu: "800m"
                  memory: "600Mi"
                requests:
                  cpu: "200m"
                  memory: "300Mi"
              env:
              - name: CASC_JENKINS_CONFIG
                value: "/etc/jenkins/configuration-as-code.yml"
              - name: GITHUB_STATUS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: jenkins
                    key: github-status-token
              - name: DOCKERHUB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: jenkins
                    key: dockerhub-password
              - name: DO_ACCESS_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: jenkins
                    key: do-access-token
              - name: DO_SSH_PRIVATE_KEY
                valueFrom:
                  secretKeyRef:
                    name: jenkins
                    key: do-ssh-private-key
              volumeMounts:
              - mountPath: "/var/jenkins_home"
                name: jenkins-home-vol
              - mountPath: "/usr/share/jenkins/ref/plugins"
                name: jenkins-plugins-vol
              - mountPath: /etc/jenkins
                name: jenkins-config-vol
                readOnly: true
            serviceAccountName: jenkins
            volumes:
            - name: jenkins-home-vol
              persistentVolumeClaim:
                claimName: jenkins-home
            - name: jenkins-plugins-vol
              persistentVolumeClaim:
                claimName: jenkins-plugins
            - name: jenkins-config-vol
              configMap:
                name: jenkins

- name: Create jenkins service
  community.kubernetes.k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: jenkins
        namespace: jenkins
      spec:
        selector:
          type: build
          build: jenkins
        ports:
        - port: 8080
          targetPort: 8080
          protocol: TCP
          name: http
        - port: 50000
          targetPort: 50000
          protocol: TCP
          name: jnlp

- name: create ingress
  community.kubernetes.k8s:
    apply: True
    definition:
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: jenkins
        namespace: jenkins
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: jonathan-boudreau
      spec:
        tls:
        - hosts:
          - jenkins.jonathan-boudreau.com
          secretName: ingress-tls-cert
        rules:
        - host: jenkins.jonathan-boudreau.com
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                serviceName: jenkins
                servicePort: 8080
