
- name: create namespace
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: jenkins

- name: create namespace for jenkins to run jobs in
  k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: jenkins-job

- name: create jenkins service account
  k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: jenkins
        namespace: jenkins

- name: create jenkins role
  k8s:
    apply: True
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: jenkins-role
        namespace: jenkins-job
      rules:
      - apiGroups: [""]
        resources: ["pods"]
        verbs: ["create", "update", "delete", "get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events", "pods/exec"]
        verbs: ["get", "list", "watch"]

- name: bind role to jenkins service account
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        namespace: jenkins-job
        name: jenkins-role-binding
      subjects:
      - kind: ServiceAccount
        name: jenkins
        namespace: jenkins
      roleRef:
        kind: Role
        name: jenkins-role
        apiGroup: rbac.authorization.k8s.io

- name: create pvc
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: jenkins-home
        namespace: jenkins
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
        storageClassName: "{{ jenkins_storage_class }}"

- name: create deployment
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: jenkins
        namespace: jenkins
      spec:
        replicas: 1
        strategy:
          type: Recreate
        selector:
          matchLabels:
            type: build
            build: jenkins
        template:
          metadata:
            labels:
              type: build
              build: jenkins
          spec:
            containers:
            - name: jenkins
              image: jenkins/jenkins:2.263.1
              resources:
                limits:
                  cpu: "800m"
                  memory: "600Mi"
                requests:
                  cpu: "200m"
                  memory: "300Mi"
              volumeMounts:
              - mountPath: "/var/jenkins_home"
                name: jenkins-home-vol
            serviceAccountName: jenkins
            volumes:
            - name: jenkins-home-vol
              persistentVolumeClaim:
                claimName: jenkins-home

- name: Create jenkins service
  k8s:
    apply: True
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: jenkins
        namespace: jenkins
      spec:
        selector:
          type: build
          build: jenkins
        ports:
        - port: 8080
          targetPort: 8080
          protocol: TCP
          name: http
        - port: 50000
          targetPort: 50000
          protocol: TCP
          name: jnlp

- name: create ingress
  k8s:
    apply: True
    definition:
      apiVersion: networking.k8s.io/v1beta1
      kind: Ingress
      metadata:
        name: jenkins
        namespace: jenkins
        annotations:
          kubernetes.io/ingress.class: "nginx"
          cert-manager.io/cluster-issuer: jonathan-boudreau
      spec:
        tls:
        - hosts:
          - jenkins.jonathan-boudreau.com
          secretName: ingress-tls-cert
        rules:
        - host: jenkins.jonathan-boudreau.com
          http:
            paths:
            - path: /
              pathType: Prefix
              backend:
                serviceName: jenkins
                servicePort: 8080
